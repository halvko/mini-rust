program       =  { SOI ~ inner_program ~ EOI }
inner_program =  { fn* }
fn            =  { "fn" ~ ident ~ param_list ~ fn_ret ~ block }
fn_ret        =  { ("->" ~ type)? }
param_list    =  { "(" ~ (param ~ ",")* ~ param? ~ ")" }
param         =  { ident ~ ":" ~ type }
block         =  { "{" ~ stmts ~ expr? ~ "}" }
stmts         =  { (stmt? ~ ";")* }
stmt          =  { let_stmt | expr }
let_stmt      =  { "let" ~ let_mut ~ ident ~ let_type ~ "=" ~ expr }
let_mut       =  { "mut"? }
let_type      =  { (":" ~ type)? }
expr          =  { s_expr ~ (infix ~ s_expr)? }
s_expr        =  { if | "(" ~ expr ~ ")" | block | loop | break | ret | call | value | ident }
type          =  { ident }
if            =  { "if" ~ expr ~ block ~ else }
else          =  { ("else" ~ block)? }
loop          =  { "loop" ~ block }
break         =  { "break" ~ expr? }
value         =  { int | bool }
int           = @{ "-"? ~ numric+ ~ ("usize"|"isize")? }
bool          =  { "true" | "false" }
call          =  { (ident | "(" ~ expr ~ ")") ~ arg_list }
arg_list      =  { "(" ~ (expr ~ ",")* ~ expr? ~ ")" }
ret           =  { "return" ~ expr? }
infix         =  { add | sub | mul | div | mod | eq | neq | lte | gte | lt | gt | assign }
add           =  { "+" }
sub           =  { "-" }
mul           =  { "*" }
div           =  { "/" }
mod           =  { "%" }
eq            =  { "==" }
neq           =  { "!=" }
lt            =  { "<" }
gt            =  { ">" }
lte           =  { "<=" }
gte           =  { ">=" }
assign        =  { "=" }
ident         = @{ alpha ~ alpha_numric* }
alpha         =  { 'a'..'z' | 'A'..'Z' }
alpha_numric  =  { alpha | numric }
numric        =  { '0'..'9' }
WHITESPACE    = _{ "\t" | " " | NEWLINE }